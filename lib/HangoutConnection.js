// Generated by CoffeeScript 1.9.2
(function() {
  var HangoutApplication, root,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  HangoutApplication = (function() {
    function HangoutApplication() {
      this.sendUrl = bind(this.sendUrl, this);
      this.init = bind(this.init, this);
      this.initialize = bind(this.initialize, this);
    }

    HangoutApplication.prototype.initialize = function() {
      if (gapi.hangout.data.getValue('updated') !== 'true') {
        $('button#update').click((function(_this) {
          return function() {
            return _this.sendUrl();
          };
        })(this));
        $('button#notify').click((function(_this) {
          return function() {
            return _this.sendUrl(true);
          };
        })(this));
        $('button#hide').click(gapi.hangout.hideApp);
        (new window.Timer).init();
        this.sendUrl(true);
        return setInterval(this.sendUrl, 300000);
      } else {
        return $('.controls__status').removeClass('controls__status--ok controls__status--error').addClass("controls__status--" + (gapi.hangout.data.getValue('status')));
      }
    };

    HangoutApplication.prototype.init = function() {
      return gapi.hangout.onApiReady.add((function(_this) {
        return function(eventObj) {
          if (eventObj.isApiReady) {
            return _this.initialize();
          }
        };
      })(this));
    };

    HangoutApplication.prototype.sendUrl = function(notify) {
      var callbackUrl, err, hangoutUrl, isBroadcasting, participants, startData, youTubeLiveId;
      startData = gapi.hangout.getStartData();
      try {
        startData = JSON.parse(startData);
        callbackUrl = startData.callbackUrl + startData.hangoutId;
      } catch (_error) {
        err = _error;
        callbackUrl = startData;
      }
      hangoutUrl = gapi.hangout.getHangoutUrl();
      youTubeLiveId = gapi.hangout.onair.getYouTubeLiveId();
      participants = gapi.hangout.getParticipants();
      isBroadcasting = gapi.hangout.onair.isBroadcasting();
      return $.ajax({
        url: callbackUrl,
        dataType: 'text',
        type: 'PUT',
        data: {
          title: startData.title,
          project_id: startData.projectId,
          event_id: startData.eventId,
          category: startData.category,
          host_id: startData.hostId,
          participants: participants,
          hangout_url: hangoutUrl,
          yt_video_id: youTubeLiveId,
          notify: notify
        },
        success: function() {
          gapi.hangout.data.setValue('status', 'ok');
          if (gapi.hangout.data.getValue('updated') !== 'true') {
            gapi.hangout.layout.displayNotice('Connection to WebsiteOne established');
            gapi.hangout.data.setValue('updated', 'true');
          }
          return $('.controls__status').removeClass('controls__status--error').addClass('controls__status--ok');
        },
        error: function() {
          gapi.hangout.data.setValue('status', 'error');
          return $('.controls__status').removeClass('controls__status--ok controls__status--error').addClass('controls__status--error');
        }
      });
    };

    return HangoutApplication;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.HangoutApplication = HangoutApplication;

  if (typeof gadgets !== "undefined" && gadgets !== null) {
    gadgets.util.registerOnLoadHandler((new HangoutApplication()).init);
  }

}).call(this);
