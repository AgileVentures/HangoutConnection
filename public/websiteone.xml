<?xml version="1.0" encoding="UTF-8" ?>
<Module>
	<ModulePrefs title="HangoutConnectionApp">
		<Require feature="rpc" />
		<Require feature="views" />
		<Require feature="locked-domain" />
	</ModulePrefs>
  <Content type="html"><![CDATA[
    <html>
<style>
/* STYLING  */
  .m-bg-metal {
    color: hsla(0,0%,20%,1);
    text-shadow: hsla(0,0%,40%,.5) 0 -1px 0, hsla(0,0%,100%,.6) 0 2px 1px;

    background-color: hsl(0,0%,90%);
    box-shadow: inset hsla(0,0%,15%,  1) 0  0px 0px 4px, /* border */
      inset hsla(0,0%,15%, .8) 0 -1px 5px 4px, /* soft SD */
      inset hsla(0,0%,0%, .25) 0 -1px 0px 7px, /* bottom SD */
      inset hsla(0,0%,100%,.7) 0  2px 1px 7px, /* top HL */

      hsla(0,0%, 0%,.15) 0 -5px 6px 4px, /* outer SD */
      hsla(0,0%,100%,.5) 0  5px 6px 4px; /* outer HL */
  }

  .m-bg-linear {
    border-radius: .5em;
    background-image: -webkit-repeating-linear-gradient(left, hsla(0,0%,100%,0) 0%, hsla(0,0%,100%,0)   6%, hsla(0,0%,100%, .1) 7.5%),
      -webkit-repeating-linear-gradient(left, hsla(0,0%,  0%,0) 0%, hsla(0,0%,  0%,0)   4%, hsla(0,0%,  0%,.03) 4.5%),
      -webkit-repeating-linear-gradient(left, hsla(0,0%,100%,0) 0%, hsla(0,0%,100%,0) 1.2%, hsla(0,0%,100%,.15) 2.2%),

      linear-gradient(180deg, hsl(0,0%,78%)  0%, 
        hsl(0,0%,90%) 47%, 
        hsl(0,0%,78%) 53%,
        hsl(0,0%,70%)100%);
  }

  .m-bg-linear:active {
    color: hsl(210, 100%, 40%);
    text-shadow: hsla(210,100%,20%,.3) 0 -1px 0, hsl(210,100%,85%) 0 2px 1px, hsla(200,100%,80%,1) 0 0 5px, hsla(210,100%,50%,.6) 0 0 20px;
    box-shadow:
      inset hsla(210,100%,30%,  1) 0  0px 0px 4px, /* border */
      inset hsla(210,100%,15%, .4) 0 -1px 5px 4px, /* soft SD */
      inset hsla(210,100%,20%,.25) 0 -1px 0px 7px, /* bottom SD */
      inset hsla(210,100%,100%,.7) 0  2px 1px 7px, /* top HL */

      hsla(210,100%,75%, .8) 0  0px 3px 2px, /* outer SD */
      hsla(210,50%,40%, .25) 0 -5px 6px 4px, /* outer SD */
      hsla(210,80%,95%,   1) 0  5px 6px 4px; /* outer HL */
  }

  body {
    font-family: "Droid Sans", "Lucida Sans Unicode", "Lucida Grande", Verdana, Arial, Helvetica, sans-serif;
    margin: 0px;
    padding: 0px;
  }

/* BLOKS  */

  .panel {
    position: relative;
    text-align: center;

    width: 100%;
    height: 100%;
    float: left;
  }

  .controls {
    width: 90%;
    height: 85%;
    margin: 0 auto 10px auto;
    border: 1px solid grey;
    box-shadow: inset 0px 0px 3px grey;
    border-radius: 5px;
  }

  .controls__header {
    text-align: center;
    padding-left: 10px;
    margin: 0 auto 20px auto;
  }

  .controls__status {
    display: inline-block;
    vertical-align: sub;
    width: 10px;
    height: 10px;
    border-radius: 50%;
  }

  .controls__status--ok {
    background-color: hsla(110, 90%, 50%, 1);
    box-shadow: inset 0px 0px 5px 1px hsla(360, 90%, 40%, 1);
    box-shadow: 0px 0px 10px 1px hsla(110, 90%, 40%, 1);
    border: 1px solid white;
  }

  .controls__status--error {
    background-color: hsla(10, 90%, 50%, 1);
    box-shadow: inset 0px 0px 5px 1px hsla(360, 90%, 40%, 1);
    box-shadow: 0px 0px 10px 1px hsla(10, 90%, 40%, 1);
    border: 1px solid white;
  }

  .controls__btn {
    width: 100px;
    height: 70px;

    border: none;
    display: block;
    margin: 0 auto 10 auto;
  }

  .controls__timer {
    margin-top: 20px;
  }

  .controls__timer__btns {
    margin-top: 10px;
  }

  .timer__label {
    display: block;
  }

  .timer__clock {
    display: block;
  }

  .timer__clock--error {
    color: red;
  }

  .timer__btn {
    width: 70px;
    margin: 0;
    padding: 0;
  }

  .timer__btn--countdown {
    display: block;
    width: 144px;
    margin-left: auto;
    margin-right: auto;
  }

  .footer {
    font-size: smaller;
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    margin-left: auto;
    margin-right: auto;
  }
</style>

<body>

  <script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

  <div class='panel m-bg-metal'>
    <h3>AgileVentures<br>connection service</h3>
    <div class='controls'>
      <div class='controls__header'>
        <p>Connection status:&nbsp;&nbsp;<span class='controls__status'>&nbsp;</span></p>
      </div>
      <div class='controls__btns'>
        <button id="update" class="controls__btn m-bg-metal m-bg-linear">Update HO details</button>
        <button id="notify" class="controls__btn m-bg-metal m-bg-linear">Notify on Slack</button>
        <button id="hide" class="controls__btn m-bg-metal m-bg-linear">Hide panel</button>
      </div>
      <div class='controls__timer'>
        <span class="timer__label">Timer</span>
        <span class='timer__clock'>00:00:00</span>
        <div class='controls__timer__btns'>
          <button class='timer__btn--countdown js-timer-countdown'>Countdown 15 min</button>
          <button class='timer__btn js-timer-start'>Start</button>
          <button class='timer__btn js-timer-stop'>Stop</button>
        </div>
      </div>
    </div>
    <div class='footer'>
      <p>WorkspaceOnAir - tools for online collaboration</p>
    </div>
  </div>
</body>

<script>
  // Generated by CoffeeScript 1.9.2
(function() {
  var Timer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Timer = (function() {
    function Timer(preset) {
      this.preset = preset != null ? preset : 900000;
      this._updateTimer = bind(this._updateTimer, this);
      this.startCountdown = bind(this.startCountdown, this);
      this.stopTimer = bind(this.stopTimer, this);
      this.startTimer = bind(this.startTimer, this);
      this.timerId = 0;
      this.time = 0;
      this.countdown = false;
    }

    Timer.prototype.startTimer = function() {
      this.time = new Date(-1000);
      this.countdown = false;
      this._resetTimer();
      return $('.js-timer-start').text('Restart');
    };

    Timer.prototype.stopTimer = function() {
      clearInterval(this.timerId);
      return $('.js-timer-start').text('Start');
    };

    Timer.prototype.startCountdown = function(event, countdown) {
      this.countdown = countdown;
      this.time = new Date(this.preset + 1000);
      this.countdown = true;
      return this._resetTimer();
    };

    Timer.prototype._resetTimer = function() {
      $('.timer__clock').removeClass('timer__clock--error');
      this._updateTimer();
      clearInterval(this.timerId);
      return this.timerId = setInterval(this._updateTimer, 1000);
    };

    Timer.prototype._updateTimer = function() {
      var sign;
      sign = this.countdown ? -1 : 1;
      this.time.setTime(this.time.getTime() + 1000 * sign);
      $('.timer__clock').text(this.time.toTimeString().slice(0, 8));
      if (this.time.getTime() === 0 && this.countdown) {
        $('.timer__clock').addClass('timer__clock--error');
        return this.stopTimer();
      }
    };

    Timer.prototype.init = function() {
      $('.js-timer-start').click(this.startTimer);
      $('.js-timer-stop').click(this.stopTimer);
      return $('.js-timer-countdown').click(this.startCountdown);
    };

    return Timer;

  })();

  this.Timer = Timer;

}).call(this);
// Generated by CoffeeScript 1.9.2
(function() {
  var HangoutApplication, root,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  HangoutApplication = (function() {
    function HangoutApplication() {
      this.sendUrl = bind(this.sendUrl, this);
      this.changeHoaStatus = bind(this.changeHoaStatus, this);
      this.initialize = bind(this.initialize, this);
      gapi.hangout.onApiReady.add((function(_this) {
        return function(eventObj) {
          if (eventObj.isApiReady) {
            _this.initialize();
            return gapi.hangout.onair.onBroadcastingChanged.add(_this.changeHoaStatus);
          }
        };
      })(this));
    }

    HangoutApplication.prototype.initialize = function() {
      if (gapi.hangout.data.getValue('updated') !== 'true') {
        $('button#update').click((function(_this) {
          return function() {
            return _this.sendUrl();
          };
        })(this));
        $('button#notify').click((function(_this) {
          return function() {
            return _this.sendUrl(true);
          };
        })(this));
        $('button#hide').click(gapi.hangout.hideApp);
        (new window.Timer).init();
        this.hoa_status = 'started';
        this.sendUrl(true);
        return setInterval(this.sendUrl, 120000);
      } else {
        return $('.controls__status').removeClass('controls__status--ok controls__status--error').addClass("controls__status--" + (gapi.hangout.data.getValue('status')));
      }
    };

    HangoutApplication.prototype.changeHoaStatus = function(e) {
      var prev_hoa_status;
      prev_hoa_status = this.hoa_status;
      this.hoa_status = e.isBroadcasting && prev_hoa_status === 'started' ? 'broadcasting' : !e.isBroadcasting && prev_hoa_status === 'broadcasting' ? 'finished' : prev_hoa_status;
      if (prev_hoa_status !== this.hoa_status) {
        return this.sendUrl();
      }
    };

    HangoutApplication.prototype.sendUrl = function(notify) {
      var callbackUrl, hangoutUrl, hoa_status, isBroadcasting, participants, startData, youTubeLiveId;
      startData = JSON.parse(gapi.hangout.getStartData());
      callbackUrl = startData.callbackUrl + startData.hangoutId;
      hangoutUrl = gapi.hangout.getHangoutUrl();
      youTubeLiveId = gapi.hangout.onair.getYouTubeLiveId();
      participants = gapi.hangout.getParticipants();
      isBroadcasting = gapi.hangout.onair.isBroadcasting();
      hoa_status = this.hoa_status;
      return $.ajax({
        url: callbackUrl,
        dataType: 'text',
        type: 'PUT',
        data: {
          title: startData.title,
          project_id: startData.projectId,
          event_id: startData.eventId,
          category: startData.category,
          host_id: startData.hostId,
          participants: participants,
          hangout_url: hangoutUrl,
          yt_video_id: youTubeLiveId,
          hoa_status: hoa_status,
          notify: notify
        },
        success: function() {
          gapi.hangout.data.setValue('status', 'ok');
          if (gapi.hangout.data.getValue('updated') !== 'true') {
            gapi.hangout.layout.displayNotice('Connection to WebsiteOne established');
            gapi.hangout.data.setValue('updated', 'true');
          }
          return $('.controls__status').removeClass('controls__status--error').addClass('controls__status--ok');
        },
        error: function() {
          gapi.hangout.data.setValue('status', 'error');
          return $('.controls__status').removeClass('controls__status--ok controls__status--error').addClass('controls__status--error');
        }
      });
    };

    return HangoutApplication;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.HangoutApplication = HangoutApplication;

  if (typeof gadgets !== "undefined" && gadgets !== null) {
    gadgets.util.registerOnLoadHandler(new HangoutApplication());
  }

}).call(this);

</script>

]]>
</Content>
</Module>
